////  Artsmesh_AppDelegate.m////  Version: 0.2.1//  Authors: WANG Hailei, JIA Chao//  Created by WANG Hailei on 7/19/10.//  Copyright 2010 Farefore. All rights reserved.#import "Artsmesh_AppDelegate.h"@implementation Artsmesh_AppDelegate#pragma mark -#pragma mark View Controllers@synthesize window;@synthesize mainMenuWindowController;#pragma mark -#pragma mark Model Controllers#pragma mark Application Events Handling- (void) applicationDidFinishLaunching:(NSNotification *)aNotification {	NSString * err=nil;	BOOL preferencesAreComplete=[PreferencesHelper checkAllRequiredPreferences:&err];	if (preferencesAreComplete) {				// 1. Login Artsmesh web service		[ArtsmeshUser login:[PreferencesHelper statusNetUserName]];				// 2. Load iChat		if ([ChatTaskHelper currentiChatApplication]==nil)		{			[ChatTaskHelper loadiChatApp];		}				// 3. Prepare Jack		[self.jackTaskContainer stopAllTasks];	// Stop running Jack Trip processes		[self startJackServer];					// Start Jack Server (jackdmp)        		[self.mainMenuWindowController.loadingWindow close];        [self InitilizeMainWindow];			}	else {		// Preferences are incomplete.		[self.mainMenuWindowController appendOutputText:@"The Preferences are incomplete.\n"];		[self.mainMenuWindowController appendOutputText:@"Please set the necessary settings in Preferences and restart Artsmesh again to take affect.\n"];		[self.mainMenuWindowController appendOutputText:err];				[self.mainMenuWindowController.playInstrumentButton setEnabled:NO];		[self.mainMenuWindowController.stopInsrumentButton setEnabled:NO];				// Cloase loading window and show main window.		[self.mainMenuWindowController.loadingWindow close];		[self.mainMenuWindowController showWindow:self];				NSWindow * preferenceWindow=[[PreferencesWindowController sharedInstance] window];		[NSApp runModalForWindow: preferenceWindow];		// Dialog is up here.		[NSApp endSheet: preferenceWindow];		[preferenceWindow orderOut: self];	}}- (void)applicationWillTerminate:(NSNotification *)aNotification{	// Logout user	[ArtsmeshUser logout:[PreferencesHelper statusNetUserName]];}-(void) applyPreferencesChanges{	// Refresh IP host dsta source	[self.mainMenuWindowController.ipHostDataSourceController getMyHostIPAddressList];}-(void) InitilizeMainWindow{    [self.mainMenuWindowController selectDefaultItemInIPComboBox];    [self.mainMenuWindowController refreshContactsTableView:nil];    [self.mainMenuWindowController switchMainViewTo:nil];    [self.mainMenuWindowController refreshStatusNetTimelineTableView:nil];    [self.mainMenuWindowController showWindow:self];        // Start the timers    [self.mainMenuWindowController startInvitationCheckTimer:nil];    [self.mainMenuWindowController startStatusNetUserRefreshTimer:nil];    [self.mainMenuWindowController startStatusNetTimelineRefreshTimer:nil];    }#pragma mark -@synthesize jackTaskContainer;-(void) startJackServer{	BOOL jackServerIsRunning=NO;		// Check whether Jack Sever process is running	ProcessInfo *procInfo = [[ProcessInfo alloc] init];    [procInfo obtainFreshProcessList]; // Get a list of process    jackServerIsRunning = [procInfo findProcessWithName:kJackServerProcessName];	[procInfo release];		if(jackServerIsRunning){		// Set a nil NSTask, if Jack Server is running. In this case, Artsmesh won't terminate that task when Artsmesh is closed.		// It means that Artsmesh won't terminate the Jack Server task which is not started by Artsmesh.		self.jackTaskContainer.jackServerTask=nil;	}	else{		JackServerPreference *jackServerPreference=[[JackServerPreference alloc] init];		jackServerPreference.inputDevice=[PreferencesHelper jackServerInputDevice];		jackServerPreference.outputDevice=[PreferencesHelper jackServerOutputDevice];		jackServerPreference.sampleRate=[PreferencesHelper jackServerSampleRate];		jackServerPreference.bufferSize=[PreferencesHelper jackServerBufferSize];        jackServerPreference.hogMode = [PreferencesHelper jackServerHogMode];        jackServerPreference.clockDriftCompensation = [PreferencesHelper jackServerClockDriftCompensation];        jackServerPreference.systemPortMonitoring = [PreferencesHelper jackServerSystemPortMonitoring];        jackServerPreference.activateMIDI=[PreferencesHelper jackServerActivateMIDI];		jackServerPreference.interfaceInputChannels=[PreferencesHelper jackServerInterfaceInputChannels];		jackServerPreference.interfaceOutputChanels=[PreferencesHelper jackServerInterfaceOutputChannels];				// Start Jack Server process.		NSTask *task=[JackTaskHelper startJackServerWithPreference:jackServerPreference];				[jackServerPreference release];				// start Jack Server and set a NSTask point to Jack Server process. In this case, Artsmesh will terminate that task when Artsmesh is closed.		[task retain];		self.jackTaskContainer.jackServerTask=task;	}}@end