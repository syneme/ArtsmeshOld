////  Artsmesh_AppDelegate.m////  Version: 0.2.1//  Authors: WANG Hailei, JIA Chao//  Created by WANG Hailei on 7/19/10.//  Copyright 2010 Farefore. All rights reserved.//#import "Artsmesh_AppDelegate.h"//const NSString *serverBaseAddress=@"http://127.0.0.1:3000/";// Hard Code here for current user name and local IP address//const NSString *currentIPAddress=@"127.0.0.1";NSString* const CENTRAL_SERVER_ADDRESS=@"http://192.168.0.2:3000/";  //@"http://syneme.ucalgary.ca:8085/";@implementation Artsmesh_AppDelegate@synthesize persistentStoreCoordinator;@synthesize managedObjectModel;@synthesize managedObjectContext;@synthesize window;@synthesize contactsTable;@synthesize ipComboBox;@synthesize roomButton;@synthesize readyButton;@synthesize contactsController;@synthesize currentHostIPAddress;@synthesize currentHostArtistName;@synthesize participatedArtistNames;@synthesize taskContainer;@synthesize currentHostIPAddresses;/*- (void) setHostIPAddressType:(NSString *)addressType {		if ( [addressType isEqualToString:@"IPv4"] == YES ) {		self.currentHostIPAddress = [[[NSHost currentHost] addresses] objectAtIndex:1];			} else {		self.currentHostIPAddress = [[[NSHost currentHost] addresses] objectAtIndex:0];			} }*/- (void) applicationDidFinishLaunching:(NSNotification *)aNotification {		// Insert code here to initialize your application 	taskContainer=[[JackTripTaskContainer alloc] init];	// Default set IP verson to 4.	[self setIPVersion4:self];		NSArray *arr=[[NSHost currentHost] addresses];	[arr retain];	self.currentHostIPAddresses=arr;		id sel=[self.currentHostIPAddresses objectAtIndex:0];	NSLog(@"%@",[sel description]);		// TODO: Get the real currentHostArtistName;	ABAddressBook *currentAB=[ABAddressBook addressBook];	ABPerson *me=[currentAB me];		NSString *myFirstName=[me valueForProperty:kABFirstNameProperty];	NSString *myLastName=[me valueForProperty:kABLastNameProperty];		NSMutableString *currentName=[NSMutableString stringWithCapacity:10];	if(myFirstName!=nil)	{		[currentName appendString:[myFirstName stringByReplacingOccurrencesOfString:@" " withString:@""]];	}		if(myLastName!=nil)		[currentName appendString:[myLastName stringByReplacingOccurrencesOfString:@" " withString:@""]];	[currentName retain];	self.currentHostArtistName = currentName;		NSLog(@"MyFullName: %@", currentName);	    NSMutableString *names=[NSMutableString stringWithCapacity:10];    [names retain];    self.participatedArtistNames=names;		[self.ipComboBox selectItemAtIndex:0];		// Start Jack Server	// jackdmp --realtime -d coreaudio -C "Built-in Input" -P "Built-in Output" -i2 -o2 -r44100 -p512	JackServerPreference *preference=[[JackServerPreference alloc] init];	preference.inputDevice=@"Built-in Input";	preference.outputDevice=@"Built-in Output";	preference.sampleRate=@"44100";	preference.bufferSize=@"512";	preference.interfaceInputChannels=@"2";	preference.interfaceOutputChanels=@"2";		NSTask *task=[JackTripTaskHelper startJackServerWithPreference:preference];	[task retain];	self.taskContainer.jackServerTask=task;		[preference release];}-(void) setButton:(NSButton*)button 			 flag:(BOOL)flag{	[button setEnabled:flag];	[button setTransparent:!flag];}- (IBAction) setIPVersion4:(id)sender {	NSMutableString *currentIP=[[[NSHost currentHost] addresses] objectAtIndex:1];		[currentIP retain];	self.currentHostIPAddress=currentIP;	NSLog(@"currentHostIPAddress is : %@", self.currentHostIPAddress);}- (IBAction) setIPVersion6:(id)sender {	NSMutableString *currentIP=[[[NSHost currentHost] addresses] objectAtIndex:1];	[currentIP retain];	self.currentHostIPAddress=currentIP;		NSLog(@"currentHostIPAddress is : %@", self.currentHostIPAddress);}- (IBAction) callTerminalCommands:(id)sender {	// Start jack server	//taskContainer.jackServerTask=[JackTripTaskHelper startJackServer];		// Launch server tasks	NSArray *serverChanelList=taskContainer.jackServerChanelList;	taskContainer.jackTripServerTaskList=[JackTripTaskHelper buildJackTaskList:serverChanelList];		NSArray *serverTaskList=taskContainer.jackTripServerTaskList;	[serverTaskList retain];	[JackTripTaskHelper launchTaskList:&serverTaskList];		// Launch client tasks	NSArray *clientChanelList=taskContainer.jackClientChanelList;	taskContainer.jackTripClientTaskList=[JackTripTaskHelper buildJackTaskList:clientChanelList];		NSArray *clientTaskList=taskContainer.jackTripClientTaskList;	[clientTaskList retain];	[JackTripTaskHelper launchTaskList:&clientTaskList];}- (IBAction) stopTerminalCommands:(id)sender {	[taskContainer stopAllTasks];	}- (IBAction) createRoom:(id)sender {		// Before creating new room, remove/destroy the might existing previous room.	NSString * getUrl = [NSString stringWithFormat:@"%@%@", CENTRAL_SERVER_ADDRESS, @"rooms/delete"];	NSLog(@"Removing room at %@",[[NSDate date] description]);	NSString *getResult=[RESTfulRequestHelper sendGETRequest:getUrl];	NSLog(@"GET RESULT: %@", getResult);	NSLog(@"Removed room at %@",[[NSDate date] description]);	    	// Preparing the parameters for creating new room.		[self.participatedArtistNames setString:@""];		for (id anArtistInfo in [self.contactsController selectedObjects] ) {				NSString *curFirstName=(NSString *)[anArtistInfo objectForKey:@"IMPersonFirstName"];		if(curFirstName!=nil)			[self.participatedArtistNames appendString:[curFirstName stringByReplacingOccurrencesOfString:@" " withString:@""]];				NSString *curLastName=(NSString *)[anArtistInfo objectForKey:@"IMPersonLastName"];		if(curLastName!=nil)			[self.participatedArtistNames appendString:[curLastName stringByReplacingOccurrencesOfString:@" " withString:@""]];				[self.participatedArtistNames appendString:@","];		//[self.participatedArtistNames appendString:[NSString stringWithFormat:@"%@,",(NSString *)[anArtistInfo objectForKey:@"IMPersonScreenName"]]];	}	[self.participatedArtistNames appendFormat:@"%@", self.currentHostArtistName];		//[self.participatedArtistNames substringToIndex:([self.participatedArtistNames length]-2)]; // Omit the last comma.	NSLog(@"Artist Names: %@",self.participatedArtistNames);		// Compose XML data	NSString * postData = [NSString stringWithFormat:@"<?xml version='1.0' encoding='UTF-8' ?><room><Name>Room1</Name><Artists>%@</Artists></room>", self.participatedArtistNames];    NSLog(@"PostData is: %@",postData);    	NSString * postUrl  = [NSString stringWithFormat:@"%@%@", CENTRAL_SERVER_ADDRESS, @"rooms.xml"];    NSLog(@"POST URL is: %@",postUrl);    	// Creat room through a RESTful post request.	NSLog(@"Posting to create new room at %@",[[NSDate date] description]);	NSString * responseString = [RESTfulRequestHelper sendPOSTRequestWithXmlText:postUrl xmlText:postData];	NSLog(@"Response text: %@",responseString);	NSLog(@"Created room at %@",[[NSDate date] description]);		// Invoke I'm Ready	[self getReady];}- (void) getReady{	NSMutableString *curIP=[NSMutableString stringWithCapacity:10];	[curIP appendString:[self.ipComboBox objectValueOfSelectedItem]];	[curIP retain];	self.currentHostIPAddress=curIP;		NSString * postData = [NSString stringWithFormat:@"<?xml version='1.0' encoding='UTF-8' ?><artist><Name>%@</Name><IP>%@</IP><RoomName>Room1</RoomName><Status>0</Status><Index>0</Index></artist>", self.currentHostArtistName, self.currentHostIPAddress];	NSLog(@"%@",postData);		NSString * postUrl  = [NSString stringWithFormat:@"%@%@", CENTRAL_SERVER_ADDRESS, @"artists.xml"];	NSString * responseString = [RESTfulRequestHelper sendPOSTRequestWithXmlText:postUrl xmlText:postData];	NSLog(@"%@",responseString);		// Change status to 1	NSString *getUrl=[NSString stringWithFormat:@"%@artists/%@.1.xml", CENTRAL_SERVER_ADDRESS, self.currentHostArtistName];	NSLog(@"Changing status to 1 at %@",[[NSDate date] description]);		responseString=[RESTfulRequestHelper sendGETRequest:getUrl];	NSLog(@"%@",responseString);	NSLog(@"Changed status to 1 at %@",[[NSDate date] description]);		// Run loop to get expected response xml message	BOOL runLoopFlag=YES;	NSString *getRunLoopUrl=nil;	NSString *responseText=nil;		// Get server chanel list	do {				getRunLoopUrl=[NSString stringWithFormat:@"%@scripts/server/%@.xml", CENTRAL_SERVER_ADDRESS, self.currentHostArtistName];		NSLog(@"Trying to get server chanel list at %@",[[NSDate date] description]);		responseText=[RESTfulRequestHelper sendGETRequest:getRunLoopUrl];		NSLog(@"Response for server chanel list: %@",responseText);		if ([responseText isEqualToString:@"<message>waiting</message>"] || [responseText isEqualToString:@"<message>error</message>"]) {			runLoopFlag=YES;			NSLog(@"Go to next loop at %@",[[NSDate date] description]);		}		else {			runLoopFlag=NO;			NSLog(@"Got the server chanel list at %@",[[NSDate date] description]);		}				// Sleep for 0.5 seconds		[NSThread sleepForTimeInterval:2];	} while (runLoopFlag);			NSArray *serverChanelList=[JackTripChanelInfo getJackTripChanelListFromXml:responseText];	[serverChanelList retain];	taskContainer.jackServerChanelList=serverChanelList;	// Launch server tasks	NSLog(@"Launching server side task list at %@",[[NSDate date] description]);	taskContainer.jackTripServerTaskList=[JackTripTaskHelper buildJackTaskList:serverChanelList];	NSArray *serverTaskList=taskContainer.jackTripServerTaskList;	[serverTaskList retain];	[JackTripTaskHelper launchTaskList:&serverTaskList];	NSLog(@"Finish to lauch server side task list at %@",[[NSDate date] description]);		// Change status to 2	NSLog(@"Changing status to 2 at %@",[[NSDate date] description]);	getUrl=[NSString stringWithFormat:@"%@artists/%@.2.xml", CENTRAL_SERVER_ADDRESS, self.currentHostArtistName];	[RESTfulRequestHelper sendGETRequest:getUrl];	NSLog(@"Changed status to 2 at %@",[[NSDate date] description]);			// Get client chanel list	runLoopFlag=YES;	do {				getRunLoopUrl=[NSString stringWithFormat:@"%@scripts/client/%@.xml", CENTRAL_SERVER_ADDRESS, self.currentHostArtistName];		NSLog(@"Trying to get client chanel list at %@",[[NSDate date] description]);		responseText=[RESTfulRequestHelper sendGETRequest:getRunLoopUrl];		NSLog(@"Response for client chanel list: %@",responseText);				if ([responseText isEqualToString:@"<message>waiting</message>"] || [responseText isEqualToString:@"<message>error</message>"]) {			runLoopFlag=YES;			NSLog(@"Go to next loop at %@",[[NSDate date] description]);					}		else {			runLoopFlag=NO;			NSLog(@"Got the client chanel list at %@",[[NSDate date] description]);		}				// Sleep for 0.5 seconds		[NSThread sleepForTimeInterval:2];	} while (runLoopFlag);		NSArray *clientChanelList=[JackTripChanelInfo getJackTripChanelListFromXml:responseText];	[clientChanelList retain];	taskContainer.jackClientChanelList=clientChanelList;		// Launch client tasks		taskContainer.jackTripClientTaskList=[JackTripTaskHelper buildJackTaskList:clientChanelList];	NSArray *clientTaskList=taskContainer.jackTripClientTaskList;	[clientTaskList retain];	NSLog(@"Launching client side task list at %@",[[NSDate date] description]);	[JackTripTaskHelper launchTaskList:&clientTaskList];	NSLog(@"Finish to launch client side task list at %@",[[NSDate date] description]);		// Change status to 3	NSLog(@"Changing status to 3 at %@",[[NSDate date] description]);	getUrl=[NSString stringWithFormat:@"%@artists/%@.3.xml", CENTRAL_SERVER_ADDRESS, self.currentHostArtistName];	[RESTfulRequestHelper sendGETRequest:getUrl];	NSLog(@"Changed status to 3 at %@",[[NSDate date] description]);}- (IBAction) stopButtonClick:(id)sender{		[taskContainer stopAllTasks];}/* // Moved into createRoom:- (IBAction) removeRoom:(id)sender{	NSString *getUrl=[NSString stringWithFormat:@"%@%@", CENTRAL_SERVER_ADDRESS, @"rooms/delete"];	[RESTfulRequestHelper sendGETRequest:getUrl];}*/- (IBAction) readyCommand:(id)sender {	[self getReady];}- (IBAction) launchiChat:(id)sender {		[ChatTaskHelper launchiChat];}/** Returns the support directory for the application, used to store the Core Data store file.  This code uses a directory named "Artsmesh" for the content, either in the NSApplicationSupportDirectory location or (if the former cannot be found), the system's temporary directory. */- (NSString *) applicationSupportDirectory {		NSArray *paths = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, YES);	NSString *basePath = ([paths count] > 0) ? [paths objectAtIndex:0] : NSTemporaryDirectory();	return [basePath stringByAppendingPathComponent:@"Artsmesh"];}			       #pragma mark -#pragma mark Application Framework Methods			       /** Creates, retains, and returns the managed object model for the application  by merging all of the models found in the application bundle. */- (NSManagedObjectModel *) managedObjectModel {		if (managedObjectModel) return managedObjectModel;		managedObjectModel = [[NSManagedObjectModel mergedModelFromBundles:nil] retain];    	return managedObjectModel;}/** Returns the persistent store coordinator for the application.  This  implementation will create and return a coordinator, having added the  store for the application to it.  (The directory for the store is created,  if necessary.) */- (NSPersistentStoreCoordinator *) persistentStoreCoordinator {		if (persistentStoreCoordinator) return persistentStoreCoordinator;		NSManagedObjectModel *mom = [self managedObjectModel];	if (!mom) {		NSAssert(NO, @"Managed object model is nil");		NSLog(@"%@:%s No model to generate a store from", [self class], _cmd);		return nil;	}		NSFileManager *fileManager = [NSFileManager defaultManager];	NSString *applicationSupportDirectory = [self applicationSupportDirectory];	NSError *error = nil;		if ( ![fileManager fileExistsAtPath:applicationSupportDirectory isDirectory:NULL] ) {		if (![fileManager createDirectoryAtPath:applicationSupportDirectory withIntermediateDirectories:NO attributes:nil error:&error]) {			NSAssert(NO, ([NSString stringWithFormat:@"Failed to create App Support directory %@ : %@", applicationSupportDirectory,error]));			NSLog(@"Error creating application support directory at %@ : %@",applicationSupportDirectory,error);			return nil;		}	}		NSURL *url = [NSURL fileURLWithPath: [applicationSupportDirectory stringByAppendingPathComponent: @"storedata"]];	persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel: mom];	if (![persistentStoreCoordinator addPersistentStoreWithType:NSXMLStoreType 						      configuration:nil 								URL:url 							    options:nil 							      error:&error]){		[[NSApplication sharedApplication] presentError:error];		[persistentStoreCoordinator release], persistentStoreCoordinator = nil;		return nil;	}    		return persistentStoreCoordinator;}/** Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)  */- (NSManagedObjectContext *) managedObjectContext {		if (managedObjectContext) return managedObjectContext;		NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];	if (!coordinator) {		NSMutableDictionary *dict = [NSMutableDictionary dictionary];		[dict setValue:@"Failed to initialize the store" forKey:NSLocalizedDescriptionKey];		[dict setValue:@"There was an error building up the data file." forKey:NSLocalizedFailureReasonErrorKey];		NSError *error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];		[[NSApplication sharedApplication] presentError:error];		return nil;	}	managedObjectContext = [[NSManagedObjectContext alloc] init];	[managedObjectContext setPersistentStoreCoordinator: coordinator];		return managedObjectContext;}/** Returns the NSUndoManager for the application.  In this case, the manager returned is that of the managed object context for the application. */- (NSUndoManager *) windowWillReturnUndoManager:(NSWindow *)window {	return [[self managedObjectContext] undoManager];}/** Performs the save action for the application, which is to send the save: message to the application's managed object context.  Any encountered errors are presented to the user. */- (IBAction) saveAction:(id)sender {		NSError *error = nil;		if (![[self managedObjectContext] commitEditing]) {		NSLog(@"%@:%s unable to commit editing before saving", [self class], _cmd);	}		if (![[self managedObjectContext] save:&error]) {		[[NSApplication sharedApplication] presentError:error];	}}/** Implementation of the applicationShouldTerminate: method, used here to handle the saving of changes in the application managed object context before the application terminates. */- (NSApplicationTerminateReply) applicationShouldTerminate:(NSApplication *)sender {		if (!managedObjectContext) return NSTerminateNow;		if (![managedObjectContext commitEditing]) {		NSLog(@"%@:%s unable to commit editing to terminate", [self class], _cmd);		return NSTerminateCancel;	}		if (![managedObjectContext hasChanges]) return NSTerminateNow;		NSError *error = nil;	if (![managedObjectContext save:&error]) {				// This error handling simply presents error information in a panel with an 		// "Ok" button, which does not include any attempt at error recovery (meaning, 		// attempting to fix the error.)  As a result, this implementation will 		// present the information to the user and then follow up with a panel asking 		// if the user wishes to "Quit Anyway", without saving the changes.				// Typically, this process should be altered to include application-specific 		// recovery steps.                  		BOOL result = [sender presentError:error];		if (result) return NSTerminateCancel;				NSString *question = NSLocalizedString(@"Could not save changes while quitting.  Quit anyway?", @"Quit without saves error question message");		NSString *info = NSLocalizedString(@"Quitting now will lose any changes you have made since the last successful save", @"Quit without saves error question info");		NSString *quitButton = NSLocalizedString(@"Quit anyway", @"Quit anyway button title");		NSString *cancelButton = NSLocalizedString(@"Cancel", @"Cancel button title");		NSAlert *alert = [[NSAlert alloc] init];		[alert setMessageText:question];		[alert setInformativeText:info];		[alert addButtonWithTitle:quitButton];		[alert addButtonWithTitle:cancelButton];				NSInteger answer = [alert runModal];		[alert release];		alert = nil;				if (answer == NSAlertAlternateReturn) return NSTerminateCancel;			}		return NSTerminateNow;}/** Implementation of dealloc, to release the retained variables. */- (void) dealloc {		[window release];	[managedObjectContext release];	[persistentStoreCoordinator release];	[managedObjectModel release];		[taskContainer release];		[super dealloc];}@end