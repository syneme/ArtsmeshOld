////  ChatTaskHelper.m//  Artsmesh////  Created by WANG Hailei on 7/10/10.//  Copyright 2010 Farefore Co. All rights reserved.//#import "ChatTaskHelper.h"@implementation ChatTaskHelperstatic iChatApplication * _iChatApp=nil;+ (void) initialize{	[ChatTaskHelper loadiChatApp];}+(iChatApplication *) currentiChatApplication{	return _iChatApp;}+ (void) launchiChat {		[[NSWorkspace sharedWorkspace] launchApplication:@"iChat"];}/* Attempts to retrieve an instance of the iChat application and returns it if successful. */+ (void)loadiChatApp{	if (_iChatApp!=nil) {		[_iChatApp release];		_iChatApp=nil;	}	    @try {		/* This will use the Scripting Bridge to get a reference to the main application class		 for iChat, as defined in the iChat.h header (see ReadMe.txt for more information). */        _iChatApp = (iChatApplication *)[[SBApplication applicationWithBundleIdentifier:@"com.apple.iChat"] retain];    }    @catch(NSException *except) {        NSLog(@"Exception %@", except);    }}+ (iChatService *) artsmeshiChatService{	SBElementArray *services = [[ChatTaskHelper currentiChatApplication] services];	iChatService * curService=nil;	    /* Iterate through the available services */    for (iChatService * svc in services) {		if ([svc.id isEqualToString:[PreferencesHelper artsmeshiChatServiceGuid]]) {			curService=svc;						printf("Artsmesh iChatService id: %s\r\n", [[svc id] UTF8String]);			break;		}    }		return curService;}+ (NSString*) iChatAccountStatusText:(iChatAccountStatus)status{	switch (status) {		case iChatAccountStatusAvailable:			return @"Available";		case iChatAccountStatusAway:			return @"Away";		case iChatAccountStatusOffline:			return @"Offline";		case iChatAccountStatusInvisible:			return @"Invisible";		case iChatAccountStatusIdle:			return @"Idle";		case iChatAccountStatusUnknown:			return @"Unknown";	}		return @"Unknown";}+ (NSString*) iChatCapabilitiesText:(iChatCapabilities)capabilities{		switch (capabilities) {		case iChatCapabilitiesVideoChat:			return @"VideoChat";		case iChatCapabilitiesAudioChat:			return @"AudioChat";		case iChatCapabilitiesMultipersonVideo:			return @"MultipersonVideo";		case iChatCapabilitiesMultipersonAudio:			return @"MultipersonAudio";	}		return @"Unknown";}+ (iChatBuddy *) getBuddyWithArtsmeshUserName:(NSString*)artsmeshUserName{	iChatBuddy * curBuddy=nil;		iChatService * chatSvc=[ChatTaskHelper artsmeshiChatService];	SBElementArray *buddies = [chatSvc buddies];	    /* Iterate through the available services */    for (iChatBuddy * buddy in buddies) {		if ([[[buddy handle] substringToIndex:[[buddy handle] rangeOfString:@"@"].location] isEqualToString:artsmeshUserName]) {			curBuddy=buddy;			break;		}    }		return curBuddy;}+ (NSArray *) getBuddyListWithArtsmeshUserNameList:(NSArray*)artsmeshUserNameList{	NSMutableArray * arr=[[NSMutableArray alloc] initWithCapacity:[artsmeshUserNameList count]];		NSString * name=nil;	for(name in artsmeshUserNameList)	{		iChatBuddy * buddy=[ChatTaskHelper getBuddyWithArtsmeshUserName:name];		if (buddy!=nil) {			[arr addObject:buddy];		}	}	return (NSArray*)arr;}+ (BOOL) checkBuddyCapability:(iChatBuddy*)buddy capability:(iChatCapabilities)capability{	BOOL capable=NO;	iChatBuddy * curBuddy=buddy;			//printf("Buddy handle: %s\r\n", [[curBuddy handle] UTF8String]);	//printf("Buddy status: %s\r\n", [[ChatTaskHelper iChatAccountStatusText:[curBuddy status]] UTF8String]);		NSArray * cap=[curBuddy capabilities];		int i;	for(i=0; i<[cap count];i++)	{		id some=[cap objectAtIndex:i];		if (capability==(iChatCapabilities)[some enumCodeValue]) {			capable=YES;						//NSString *str=[ChatTaskHelper iChatCapabilitiesText:(iChatCapabilities)[some enumCodeValue]];			//NSLog(@"Buddy capability: %@\r\n", str);						break;		}	}		return capable;}+(void) startChat:(NSArray*) buddyList 		 chatType:(ChatType)chatType{	if ([buddyList count]>0) {				iChatService *svc=[ChatTaskHelper artsmeshiChatService];				NSString * className=nil;		switch (chatType) {			case TextChat:				className=@"text chat";				break;							case AudioChat:				className=@"audio chat";				break;							case VideoChat:				className=@"video chat";				break;							default:				className=@"text chat";		}				/* Get the class for the text chat AppleScript class */		Class videoChatClass = [_iChatApp classForScriptingClass:className];				/* Go to the chat room named "ichatStatus" on the AIM service we found */		NSDictionary *chatProperties = [NSDictionary dictionaryWithObjectsAndKeys:svc, @"service", 										buddyList, @"participants", nil];				[className release];				/* Create the text chat object */		iChatVideoChat * myChat =[[videoChatClass alloc] initWithProperties:chatProperties];				/* Add the text chat to the app's list of open chats */		[[_iChatApp videoChats] addObject:myChat];        		/* iChat will now send out the request to create chat room (not synchronous) */			}	}@end