/* Account.h  Version:0.1 Created by WANG Hailei on 7/10/10. */#import "Account.h"NSString * kAddressBookPersonStatusChanged = @"AddressBookPersonStatusChanged";NSString * kStatusImagesChanged = @"StatusImagesChanged";@implementation Account@synthesize xmppServiceAccountStatus;@synthesize accountHostIPAddress;/* Get the status of the signed-in account of iChat Jabber service, namely me with a XMPP account.  */- (void) retrieveAccountStatusForService:(IMService *)anIMService {		if ( anIMService == [IMService serviceWithName:@"Jabber"] && [anIMService status] == IMServiceStatusLoggedIn ) {		switch ([anIMService status]) {			case IMPersonStatusUnknown:				self.xmppServiceAccountStatus = @"Unknown";				break;			case IMPersonStatusOffline:				self.xmppServiceAccountStatus = @"Offline";				break;			case IMPersonStatusIdle:				self.xmppServiceAccountStatus = @"Idle";				break;			case IMPersonStatusAway:				self.xmppServiceAccountStatus = @"Away";				break;			case IMPersonStatusAvailable:				self.xmppServiceAccountStatus = @"Available";				break;		}//		NSLog(@"IMService myStatus is : %@", [IMService myStatus]);	} else {//		self.xmppServiceAccountStatus = @"Please sign in iChat XMPP.";	}	NSLog(@"image is : %@",[IMService imageNameForStatus:IMPersonStatusAvailable]);	NSLog(@"Account Host IP Address IPv4: %@", [[[NSHost currentHost] addresses] objectAtIndex:1]);	NSLog(@"Account Host IP Address IPv6: %@", [[[NSHost currentHost] addresses] objectAtIndex:0]);	}- (void) startMonitoring {		NSNotificationCenter * imNotificationCenter = [IMService notificationCenter];	[imNotificationCenter addObserver:self				 selector:@selector(imPersonStatusChangedNotification:)				     name:IMPersonStatusChangedNotification				   object:nil];	[imNotificationCenter addObserver:self				 selector:@selector(imStatusImagesChangedAppearanceNotification:)				     name:IMStatusImagesChangedAppearanceNotification				   object:nil];}- (void) stopMonitoring {		NSNotificationCenter * imNotificationCenter = [IMService notificationCenter];	[imNotificationCenter removeObserver:self];}- (void) awakeFromNib {		[self startMonitoring];}#pragma mark -#pragma mark Notifications/*  Received from IMService's custom notification center.  Posted when a different user (screenName) logs in, logs off, goes away, and so on.  This notification is for the IMService object. The user information dictionary will always contain an  IMPersonScreenNameKey and an IMPersonStatusKey, and no others.  */- (void) imPersonStatusChangedNotification:(NSNotification *)notification {		IMService * service = [notification object];	[self retrieveAccountStatusForService:service];//	NSDictionary * userInfo = [notification userInfo];//	NSString * screenName   = [userInfo objectForKey: IMPersonScreenNameKey];//	NSArray * abPersons     = [service peopleWithScreenName: screenName];//	for (ABPerson * person in abPersons) {//		[[NSNotificationCenter defaultCenter] postNotificationName:kAddressBookPersonStatusChanged object:person];//	}}/*  Received from IMService's custom notification center.  Posted when the user changes their preferred images for displaying status.  This notification is relevant to no particular object. The user information dictionary will not contain keys.  Clients that display status information graphically (using the green/yellow/red dots) should  call <tt>imageURLForStatus:</tt> to get the new image.  */- (void) imStatusImagesChangedAppearanceNotification:(NSNotification *)notification {		[[NSNotificationCenter defaultCenter] postNotificationName: kStatusImagesChanged object: self];}@end